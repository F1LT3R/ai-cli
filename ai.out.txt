Certainly! Below is an example of a simple HTTP server using Node.js with ECMAScript Modules (ESM) syntax. This example is compatible with the latest versions of Node.js that support ESM.

### Setting Up Your Project

1. **Create a new directory for your project**:

   ```bash
   mkdir my-node-esm-server
   cd my-node-esm-server
   ```

2. **Initialize a new Node.js project**:

   ```bash
   npm init -y
   ```

3. **Create a file named `server.mjs`**:

   ```bash
   touch server.mjs
   ```

4. **Edit `package.json`** to specify that you are using ESM. You can add `"type": "module"` to your `package.json` file:

   ```json
   {
     "name": "my-node-esm-server",
     "version": "1.0.0",
     "main": "server.mjs",
     "type": "module",
     "scripts": {
       "start": "node server.mjs"
     },
     "dependencies": {},
     "devDependencies": {}
   }
   ```

### Writing the HTTP Server

Now, open `server.mjs` in your favorite text editor and add the following code:

```javascript
import http from 'http';

const hostname = '127.0.0.1';
const port = 3000;

const server = http.createServer((req, res) => {
  res.statusCode = 200; // HTTP status code 200 (OK)
  res.setHeader('Content-Type', 'text/plain'); // Set content type
  res.end('Hello, World!\n'); // Send response
});

server.listen(port, hostname, () => {
  console.log(`Server running at http://${hostname}:${port}/`);
});
```

### Running the Server

To run your server, use the following command in your terminal:

```bash
npm start
```

### Accessing the Server

Once the server is running, you can access it by opening a web browser and navigating to:

```
http://127.0.0.1:3000/
```

You should see the message "Hello, World!" displayed in your browser.

### Summary

This example demonstrates how to create a simple HTTP server using Node.js with ESM syntax. You can expand upon this basic server by adding routing, middleware, or serving static files as needed.
